name: SAST CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
  pull_request:
    branches: [ "main" ]

env:
  SONAR_PROJECT_KEY: "guilhermelinosp_yarp-worker_a2c93dff-a9c3-4e98-a7cd-d89135f556d1"
  SONAR_SCANNER_DIR: ".sonar/scanner"
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  DOTNET_VERSION: "8.0.x"
  JAVA_VERSION: "17"
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true

jobs:
  build-and-analyze:
    name: Build and SonarQube Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Prevent runaway jobs

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarQube change detection

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet Packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Cache SonarQube Packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*.csproj', '**/global.json', '**/project.json') }}
          restore-keys: ${{ runner.os }}-sonar-

      - name: Cache SonarQube Scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ env.SONAR_SCANNER_DIR }}
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner-

      - name: Install SonarQube Scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${{ env.SONAR_SCANNER_DIR }}"
          dotnet tool install dotnet-sonarscanner --tool-path "${{ env.SONAR_SCANNER_DIR }}"
        continue-on-error: false # Fail fast if installation fails

      - name: Restore Dependencies
        run: dotnet restore --no-cache --force
        continue-on-error: false # Fail fast if restore fails

      - name: Build and Analyze with SonarQube
        run: |
          "${{ env.SONAR_SCANNER_DIR }}/dotnet-sonarscanner" begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /d:sonar.token="${{ env.SONAR_TOKEN }}" \
            /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" \
            /d:sonar.scanner.scanAll=false \
            /d:sonar.verbose=true # Enable verbose logging for debugging

          dotnet build --no-restore --configuration Release --verbosity minimal

          "${{ env.SONAR_SCANNER_DIR }}/dotnet-sonarscanner" end \
            /d:sonar.token="${{ env.SONAR_TOKEN }}"
        continue-on-error: false # Fail if any part fails

      - name: Check SonarQube Quality Gate
        if: always() # Run to provide feedback
        run: |
          QUALITY_GATE_STATUS=$(curl -s -u "${{ env.SONAR_TOKEN }}:" "${{ env.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT_KEY }}" | jq -r '.projectStatus.status')
          echo "SonarQube Quality Gate Status: $QUALITY_GATE_STATUS"
          if [ "$QUALITY_GATE_STATUS" = "ERROR" ]; then
            echo "Quality Gate failed!"
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
