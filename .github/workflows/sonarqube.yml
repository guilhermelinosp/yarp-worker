name: Build and SonarQube Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SONAR_PROJECT_KEY: "guilhermelinosp_yarp-worker_a2c93dff-a9c3-4e98-a7cd-d89135f556d1"
  SONAR_SCANNER_DIR: ".sonar/scanner"
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ env.SONAR_SCANNER_DIR }}
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${{ env.SONAR_SCANNER_DIR }}"
          dotnet tool update dotnet-sonarscanner --tool-path "${{ env.SONAR_SCANNER_DIR }}"

      - name: Build and Analyze with SonarQube
        run: |
          "${{ env.SONAR_SCANNER_DIR }}/dotnet-sonarscanner" begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /d:sonar.token="${{ env.SONAR_TOKEN }}" \
            /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" \
            /d:sonar.scanner.scanAll=false

          dotnet build

          "${{ env.SONAR_SCANNER_DIR }}/dotnet-sonarscanner" end \
            /d:sonar.token="${{ env.SONAR_TOKEN }}"
